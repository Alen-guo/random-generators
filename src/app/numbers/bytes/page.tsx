"use client"

import { useState } from 'react'
import { Navigation } from '@/components/common/Navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Binary, Shuffle, RefreshCw } from 'lucide-react'
import { useTranslationProtection } from '@/hooks/useTranslationProtection'

export default function BytesPage() {
  const containerRef = useTranslationProtection()
  const [count, setCount] = useState(16)
  const [format, setFormat] = useState<'hex' | 'binary' | 'decimal'>('hex')
  const [bytes, setBytes] = useState<number[]>([])
  const [isGenerating, setIsGenerating] = useState(false)

  const generateBytes = async () => {
    setIsGenerating(true)
    
    // 添加延迟以显示加载状态
    await new Promise(resolve => setTimeout(resolve, 300))
    
    const newBytes = Array.from({length: count}, () => Math.floor(Math.random() * 256))
    setBytes(newBytes)
    setIsGenerating(false)
  }

  const formatByte = (byte: number) => {
    switch (format) {
      case 'hex': return byte.toString(16).padStart(2, '0').toUpperCase()
      case 'binary': return byte.toString(2).padStart(8, '0')
      case 'decimal': return byte.toString()
    }
  }

  return (
    <div ref={containerRef} className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-zinc-900">
      <Navigation />
      <div className="container mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4">Raw Bytes Generator</h1>
          <p className="text-xl text-gray-200 max-w-2xl mx-auto">
            Generate random bytes in various formats for cryptographic and testing purposes.
          </p>
        </div>

        <div className="max-w-4xl mx-auto space-y-8">
          <Card className="bg-white/10 backdrop-blur-sm border-white/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Binary className="h-5 w-5 text-gray-400" />
                Byte Configuration
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="count" className="text-white">Number of Bytes</Label>
                  <Input
                    id="count"
                    type="number"
                    min="1"
                    max="1024"
                    value={count}
                    onChange={(e) => setCount(parseInt(e.target.value) || 1)}
                    className="bg-white/10 border-white/20 text-white"
                  />
                </div>
                <div className="space-y-2">
                  <Label className="text-white">Display Format</Label>
                  <Select value={format} onValueChange={(value: 'hex' | 'binary' | 'decimal') => setFormat(value)}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="hex">Hexadecimal</SelectItem>
                      <SelectItem value="binary">Binary</SelectItem>
                      <SelectItem value="decimal">Decimal</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <Button 
                onClick={generateBytes} 
                disabled={isGenerating}
                className="w-full bg-gray-600 hover:bg-gray-700 text-white notranslate"
                translate="no"
                data-interactive="true"
              >
                {isGenerating ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Shuffle className="h-4 w-4 mr-2" />
                    Generate Bytes
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {bytes.length > 0 && (
            <Card className="bg-white/10 backdrop-blur-sm border-white/20">
              <CardHeader>
                <CardTitle className="text-white">Generated Bytes ({format})</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-4 sm:grid-cols-8 gap-2" data-result="true">
                  {bytes.map((byte, index) => (
                    <div key={index} className="bg-white/20 rounded-lg p-2 text-center text-white font-mono text-sm">
                      {formatByte(byte)}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  )
} 