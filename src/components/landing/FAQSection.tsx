"use client"

import { useState } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { ChevronDown, ChevronUp } from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'

export function FAQSection() {
  const [openIndex, setOpenIndex] = useState<number | null>(0)

  const faqs = [
    {
      question: "What makes Random Hub different from other random generators?",
      answer: "Random Hub uses true random number generation based on atmospheric noise, not pseudo-random algorithms. This ensures cryptographically secure randomness suitable for security applications, research, and professional use cases. We also offer the most comprehensive suite of tools with 50+ generators in one platform."
    },
    {
      question: "Is Random Hub really free to use?",
      answer: "Yes! All our basic random generation tools are completely free with no registration required. We also offer premium features and API access for developers and businesses who need higher volumes or additional functionality."
    },
    {
      question: "How secure are the passwords generated by Random Hub?",
      answer: "Our password generator uses cryptographically secure random number generation, making it suitable for creating passwords for sensitive accounts. The passwords are generated client-side and never stored on our servers, ensuring maximum security and privacy."
    },
    {
      question: "Can I use Random Hub for commercial or research purposes?",
      answer: "Absolutely! Random Hub is designed for professional use. Our random generators meet the standards required for scientific research, statistical sampling, cryptographic applications, and commercial software development. We provide detailed documentation about our randomness sources and testing."
    },
    {
      question: "Does Random Hub have an API for developers?",
      answer: "Yes, we offer RESTful APIs for all our random generation tools. The API supports multiple output formats (JSON, XML, CSV, plain text) and includes comprehensive documentation. Rate limits are generous for the free tier, with premium plans available for high-volume usage."
    },
    {
      question: "How do you ensure the quality of randomness?",
      answer: "We regularly test our random number generators using industry-standard statistical tests including the Diehard tests and NIST test suite. Our randomness sources are continuously monitored, and we publish transparency reports about our testing methodology and results."
    },
    {
      question: "Can I save or bookmark my favorite generators?",
      answer: "Yes! You can bookmark any generator page, and we're working on user accounts that will allow you to save favorite tools, generator configurations, and access history. All without compromising the privacy of your generated data."
    },
    {
      question: "Is Random Hub available worldwide?",
      answer: "Random Hub is accessible globally 24/7 with 99.9% uptime. Our content delivery network ensures fast loading times regardless of your location. All our tools work in any modern web browser without requiring software installation."
    }
  ]

  const toggleFAQ = (index: number) => {
    setOpenIndex(openIndex === index ? null : index)
  }

  return (
    <div className="py-24 bg-slate-800/30">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl lg:text-5xl font-bold text-white mb-6">
            Frequently Asked
            <span className="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
              {" "}Questions
            </span>
          </h2>
          <p className="text-xl text-slate-300 max-w-3xl mx-auto">
            Everything you need to know about Random Hub's random generation tools and services.
          </p>
        </motion.div>

        <div className="max-w-4xl mx-auto">
          {faqs.map((faq, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.1 }}
              className="mb-4"
            >
              <Card className="bg-white/5 border-white/10 hover:bg-white/10 transition-all duration-300">
                <CardContent className="p-0">
                  <button
                    onClick={() => toggleFAQ(index)}
                    className="w-full p-6 text-left flex items-center justify-between hover:bg-white/5 transition-colors"
                  >
                    <h3 className="text-lg font-semibold text-white pr-4">
                      {faq.question}
                    </h3>
                    <div className="flex-shrink-0">
                      {openIndex === index ? (
                        <ChevronUp className="h-5 w-5 text-purple-300" />
                      ) : (
                        <ChevronDown className="h-5 w-5 text-purple-300" />
                      )}
                    </div>
                  </button>
                  
                  <AnimatePresence>
                    {openIndex === index && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{ duration: 0.3 }}
                        className="overflow-hidden"
                      >
                        <div className="px-6 pb-6">
                          <div className="h-px bg-white/10 mb-4"></div>
                          <p className="text-slate-300 leading-relaxed">
                            {faq.answer}
                          </p>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mt-16"
        >
          <div className="inline-flex items-center gap-4 px-6 py-3 bg-gradient-to-r from-purple-500/20 to-blue-500/20 border border-purple-500/30 rounded-full">
            <span className="text-slate-300">Still have questions?</span>
            <a
              href="mailto:support@randomhub.com"
              className="text-purple-300 hover:text-white font-medium transition-colors"
            >
              Contact Support
            </a>
          </div>
        </motion.div>
      </div>
    </div>
  )
}